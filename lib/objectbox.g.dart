// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/book.dart';
import 'models/verse.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6528093097798152915),
      name: 'Book',
      lastPropertyId: const IdUid(6, 4097196721510118874),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7797547188270453532),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4348885662050839686),
            name: 'bookId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1648413854125410039),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1148719332595791648),
            name: 'chaptersLength',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4298449904072598069),
            name: 'testment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4097196721510118874),
            name: 'genre',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 9055597903826203855),
      name: 'Verse',
      lastPropertyId: const IdUid(7, 3152057269241828161),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6518396397769891917),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1519107910351608324),
            name: 'verseId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4587857429923547508),
            name: 'bookId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7882919886985081041),
            name: 'chapterNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6622256031319675364),
            name: 'verseNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7891604420768209442),
            name: 'verseText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3152057269241828161),
            name: 'bibleTranslation',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 9055597903826203855),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Book: EntityDefinition<Book>(
        model: _entities[0],
        toOneRelations: (Book object) => [],
        toManyRelations: (Book object) => {},
        getId: (Book object) => object.id,
        setId: (Book object, int id) {
          object.id = id;
        },
        objectToFB: (Book object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final testmentOffset = fbb.writeString(object.testment);
          final genreOffset = fbb.writeString(object.genre);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.bookId);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.chaptersLength);
          fbb.addOffset(4, testmentOffset);
          fbb.addOffset(5, genreOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final bookIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final chaptersLengthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final testmentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final genreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = Book(
              id: idParam,
              bookId: bookIdParam,
              name: nameParam,
              chaptersLength: chaptersLengthParam,
              testment: testmentParam,
              genre: genreParam);

          return object;
        }),
    Verse: EntityDefinition<Verse>(
        model: _entities[1],
        toOneRelations: (Verse object) => [],
        toManyRelations: (Verse object) => {},
        getId: (Verse object) => object.id,
        setId: (Verse object, int id) {
          object.id = id;
        },
        objectToFB: (Verse object, fb.Builder fbb) {
          final verseTextOffset = fbb.writeString(object.verseText);
          final bibleTranslationOffset =
              fbb.writeString(object.bibleTranslation);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.verseId);
          fbb.addInt64(2, object.bookId);
          fbb.addInt64(3, object.chapterNumber);
          fbb.addInt64(4, object.verseNumber);
          fbb.addOffset(5, verseTextOffset);
          fbb.addOffset(6, bibleTranslationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final verseIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final bookIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final chapterNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final verseNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final verseTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final bibleTranslationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final object = Verse(
              id: idParam,
              verseId: verseIdParam,
              bookId: bookIdParam,
              chapterNumber: chapterNumberParam,
              verseNumber: verseNumberParam,
              verseText: verseTextParam,
              bibleTranslation: bibleTranslationParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// see [Book.id]
  static final id = QueryIntegerProperty<Book>(_entities[0].properties[0]);

  /// see [Book.bookId]
  static final bookId = QueryIntegerProperty<Book>(_entities[0].properties[1]);

  /// see [Book.name]
  static final name = QueryStringProperty<Book>(_entities[0].properties[2]);

  /// see [Book.chaptersLength]
  static final chaptersLength =
      QueryIntegerProperty<Book>(_entities[0].properties[3]);

  /// see [Book.testment]
  static final testment = QueryStringProperty<Book>(_entities[0].properties[4]);

  /// see [Book.genre]
  static final genre = QueryStringProperty<Book>(_entities[0].properties[5]);
}

/// [Verse] entity fields to define ObjectBox queries.
class Verse_ {
  /// see [Verse.id]
  static final id = QueryIntegerProperty<Verse>(_entities[1].properties[0]);

  /// see [Verse.verseId]
  static final verseId =
      QueryIntegerProperty<Verse>(_entities[1].properties[1]);

  /// see [Verse.bookId]
  static final bookId = QueryIntegerProperty<Verse>(_entities[1].properties[2]);

  /// see [Verse.chapterNumber]
  static final chapterNumber =
      QueryIntegerProperty<Verse>(_entities[1].properties[3]);

  /// see [Verse.verseNumber]
  static final verseNumber =
      QueryIntegerProperty<Verse>(_entities[1].properties[4]);

  /// see [Verse.verseText]
  static final verseText =
      QueryStringProperty<Verse>(_entities[1].properties[5]);

  /// see [Verse.bibleTranslation]
  static final bibleTranslation =
      QueryStringProperty<Verse>(_entities[1].properties[6]);
}
